package Prototype;

/**
 * @author zhp
 * @date 2022-08-21 20:11
 */

/**原型模式
 *  定义：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。
 *         原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节。
 *
 *  工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它
 *              们自己来实施创建，即 对象.clone()
 *
 * 浅拷贝和深拷贝的区别？
 *  浅拷贝：
 *      1）对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。
 *      2）对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行
 *      引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成
 *       员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值
 *
 *  深拷贝：
 *      1）复制对象的所有基本数据类型的成员变量值
 *      2）为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象
 *          可达的所有对象。也就是说，对象进行深拷贝要对整个对象(包括对象的引用类型)进行拷贝
 *
 * 细节：
 * 1) 创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率
 * 2) 不用重新初始化对象，而是动态地获得对象运行时的状态
 * 3) 如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码
 * 4) 在实现深克隆的时候可能需要比较复杂的代码
 * 5) 缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改
 * 其源代码，违背了 ocp 原则，这点请同学们注意
 *
 *
 */
public class Prototype {

}
